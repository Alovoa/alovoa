/*MIT License https://github.com/lubenard/simple-mp3-cutter
Copyright (c) 2020 Lubenard*/
class mp3cutter{constructor(e="/js/lib/",t=!1){self.Mp3LameEncoderConfig={memoryInitializerPrefixURL:e,TOTAL_MEMORY:1073741824},this.libPath=e,this.log=t;var a=document.getElementsByTagName("script")[0],n=document.createElement("script");n.src=this.libPath+"Mp3LameEncoder.min.js",a.parentNode.insertBefore(n,a)}logger(e){this.log}async cut(e,t,a,n,i=192){if(!e)throw"Invalid parameters!";if(t>a)throw"Start is bigger than end!";if(t<0||a<0)throw"Start or end is negative, cannot process";this.start=t,this.end=a,this.callback=n,this.bitrate=i;let s=await new Response(e).arrayBuffer();this.audioContext=new AudioContext,this.audioContext.decodeAudioData(s).then((e=>this.computeData(e)))}computeData(e){this.logger(e);let t=e.length*this.start/e.duration,a=e.length*this.end/e.duration;const n=this.audioContext.createBuffer(e.numberOfChannels,a-t,e.sampleRate);for(var i=0;i<e.numberOfChannels;i++)n.copyToChannel(e.getChannelData(i).slice(t,a),i);this.logger(n);let s=new Mp3LameEncoder(n.sampleRate,this.bitrate),r={channels:Array.apply(null,{length:n.numberOfChannels-1-0+1}).map(((e,t)=>t+0)).map((e=>n.getChannelData(e))),sampleRate:n.sampleRate,length:n.length};this.logger(r),s.encode(r.channels);let l=s.finish();this.logger(l),this.logger(URL.createObjectURL(l)),this.callback(l)}}